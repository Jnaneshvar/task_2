{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":1399887,"sourceType":"datasetVersion","datasetId":817870}],"dockerImageVersionId":30698,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-06-01T07:50:13.112176Z","iopub.execute_input":"2024-06-01T07:50:13.112706Z","iopub.status.idle":"2024-06-01T07:50:13.709087Z","shell.execute_reply.started":"2024-06-01T07:50:13.112662Z","shell.execute_reply":"2024-06-01T07:50:13.707346Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"pd.set_option('display.max_columns', None)\ndata = pd.read_csv('/kaggle/input/fraud-detection/fraudTrain.csv')\ndata.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-01T07:50:13.711744Z","iopub.execute_input":"2024-06-01T07:50:13.712487Z","iopub.status.idle":"2024-06-01T07:50:27.022646Z","shell.execute_reply.started":"2024-06-01T07:50:13.712439Z","shell.execute_reply":"2024-06-01T07:50:27.021465Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data.shape","metadata":{"execution":{"iopub.status.busy":"2024-06-01T07:50:27.023959Z","iopub.execute_input":"2024-06-01T07:50:27.024322Z","iopub.status.idle":"2024-06-01T07:50:27.031831Z","shell.execute_reply.started":"2024-06-01T07:50:27.024293Z","shell.execute_reply":"2024-06-01T07:50:27.030721Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# data = data.drop()","metadata":{"execution":{"iopub.status.busy":"2024-06-01T07:50:27.034366Z","iopub.execute_input":"2024-06-01T07:50:27.034717Z","iopub.status.idle":"2024-06-01T07:50:27.045601Z","shell.execute_reply.started":"2024-06-01T07:50:27.034686Z","shell.execute_reply":"2024-06-01T07:50:27.044330Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-06-01T07:50:27.047135Z","iopub.execute_input":"2024-06-01T07:50:27.047603Z","iopub.status.idle":"2024-06-01T07:50:27.805661Z","shell.execute_reply.started":"2024-06-01T07:50:27.047563Z","shell.execute_reply":"2024-06-01T07:50:27.804544Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"unique_entries = data.nunique()\nprint(unique_entries)","metadata":{"execution":{"iopub.status.busy":"2024-06-01T07:50:27.806979Z","iopub.execute_input":"2024-06-01T07:50:27.807286Z","iopub.status.idle":"2024-06-01T07:50:30.069449Z","shell.execute_reply.started":"2024-06-01T07:50:27.807259Z","shell.execute_reply":"2024-06-01T07:50:30.068337Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"new_data = data.loc[:, data.nunique() <= 700]\nnew_data.shape","metadata":{"execution":{"iopub.status.busy":"2024-06-01T07:50:30.070983Z","iopub.execute_input":"2024-06-01T07:50:30.071541Z","iopub.status.idle":"2024-06-01T07:50:32.428400Z","shell.execute_reply.started":"2024-06-01T07:50:30.071405Z","shell.execute_reply":"2024-06-01T07:50:32.427403Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test = pd.read_csv('/kaggle/input/fraud-detection/fraudTest.csv')\ntest.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-01T07:50:32.429552Z","iopub.execute_input":"2024-06-01T07:50:32.429839Z","iopub.status.idle":"2024-06-01T07:50:38.148383Z","shell.execute_reply.started":"2024-06-01T07:50:32.429814Z","shell.execute_reply":"2024-06-01T07:50:38.147203Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"new_data.columns","metadata":{"execution":{"iopub.status.busy":"2024-06-01T07:50:38.149934Z","iopub.execute_input":"2024-06-01T07:50:38.150378Z","iopub.status.idle":"2024-06-01T07:50:38.161324Z","shell.execute_reply.started":"2024-06-01T07:50:38.150340Z","shell.execute_reply":"2024-06-01T07:50:38.159885Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test = test[new_data.columns]\ntest.columns","metadata":{"execution":{"iopub.status.busy":"2024-06-01T07:50:38.166349Z","iopub.execute_input":"2024-06-01T07:50:38.166730Z","iopub.status.idle":"2024-06-01T07:50:38.208969Z","shell.execute_reply.started":"2024-06-01T07:50:38.166691Z","shell.execute_reply":"2024-06-01T07:50:38.207891Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n\n# Iterate over each column in the DataFrame\nfor column in new_data.columns:\n    # Get the value counts of the column\n    value_counts = new_data[column].value_counts()\n    \n    # Create a new figure for each column\n    plt.figure()\n    \n    # Create the pie chart\n    plt.pie(value_counts, labels = value_counts.index)\n    \n    # Add a title\n    plt.title('Frequency of Each Entry in ' + column)\n    \n    # Display the plot\n    plt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-06-01T07:50:38.210401Z","iopub.execute_input":"2024-06-01T07:50:38.210755Z","iopub.status.idle":"2024-06-01T07:50:56.744166Z","shell.execute_reply.started":"2024-06-01T07:50:38.210728Z","shell.execute_reply":"2024-06-01T07:50:56.742892Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"fraud_data = new_data[new_data['is_fraud'] == 1]","metadata":{"execution":{"iopub.status.busy":"2024-06-01T07:50:56.745812Z","iopub.execute_input":"2024-06-01T07:50:56.746646Z","iopub.status.idle":"2024-06-01T07:50:56.766891Z","shell.execute_reply.started":"2024-06-01T07:50:56.746602Z","shell.execute_reply":"2024-06-01T07:50:56.765500Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Iterate over each column in the DataFrame\nfor column in fraud_data.columns:\n    # Get the value counts of the column\n    value_counts = fraud_data[column].value_counts()\n    \n    # Create a new figure for each column\n    plt.figure()\n    \n    # Create the pie chart\n    plt.pie(value_counts, labels = value_counts.index)\n    \n    # Add a title\n    plt.title('Frequency of Each Entry in ' + column)\n    \n    # Display the plot\n    plt.show()","metadata":{"execution":{"iopub.status.busy":"2024-06-01T07:50:56.768859Z","iopub.execute_input":"2024-06-01T07:50:56.769606Z","iopub.status.idle":"2024-06-01T07:51:13.763019Z","shell.execute_reply.started":"2024-06-01T07:50:56.769559Z","shell.execute_reply":"2024-06-01T07:51:13.761936Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"value_counts = fraud_data['gender'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-06-01T07:51:13.764544Z","iopub.execute_input":"2024-06-01T07:51:13.765222Z","iopub.status.idle":"2024-06-01T07:51:13.772871Z","shell.execute_reply.started":"2024-06-01T07:51:13.765179Z","shell.execute_reply":"2024-06-01T07:51:13.771779Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"value_counts","metadata":{"execution":{"iopub.status.busy":"2024-06-01T07:51:13.774363Z","iopub.execute_input":"2024-06-01T07:51:13.775536Z","iopub.status.idle":"2024-06-01T07:51:13.792201Z","shell.execute_reply.started":"2024-06-01T07:51:13.775406Z","shell.execute_reply":"2024-06-01T07:51:13.791092Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"new_data.duplicated()","metadata":{"execution":{"iopub.status.busy":"2024-06-01T07:51:13.793649Z","iopub.execute_input":"2024-06-01T07:51:13.794795Z","iopub.status.idle":"2024-06-01T07:51:14.632051Z","shell.execute_reply.started":"2024-06-01T07:51:13.794752Z","shell.execute_reply":"2024-06-01T07:51:14.630863Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"new_data = new_data.drop_duplicates()","metadata":{"execution":{"iopub.status.busy":"2024-06-01T07:51:14.633295Z","iopub.execute_input":"2024-06-01T07:51:14.633622Z","iopub.status.idle":"2024-06-01T07:51:15.521120Z","shell.execute_reply.started":"2024-06-01T07:51:14.633594Z","shell.execute_reply":"2024-06-01T07:51:15.519712Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"new_data.shape","metadata":{"execution":{"iopub.status.busy":"2024-06-01T07:51:15.522693Z","iopub.execute_input":"2024-06-01T07:51:15.523207Z","iopub.status.idle":"2024-06-01T07:51:15.532452Z","shell.execute_reply.started":"2024-06-01T07:51:15.523169Z","shell.execute_reply":"2024-06-01T07:51:15.530339Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"new_data['is_fraud'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-06-01T07:51:15.535148Z","iopub.execute_input":"2024-06-01T07:51:15.535698Z","iopub.status.idle":"2024-06-01T07:51:15.551158Z","shell.execute_reply.started":"2024-06-01T07:51:15.535645Z","shell.execute_reply":"2024-06-01T07:51:15.549760Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import seaborn as sns\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')","metadata":{"execution":{"iopub.status.busy":"2024-06-01T07:51:15.552522Z","iopub.execute_input":"2024-06-01T07:51:15.552819Z","iopub.status.idle":"2024-06-01T07:51:16.312054Z","shell.execute_reply.started":"2024-06-01T07:51:15.552792Z","shell.execute_reply":"2024-06-01T07:51:16.310810Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sns.countplot(new_data['is_fraud'])\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-06-01T07:51:16.313523Z","iopub.execute_input":"2024-06-01T07:51:16.313853Z","iopub.status.idle":"2024-06-01T07:51:16.510774Z","shell.execute_reply.started":"2024-06-01T07:51:16.313826Z","shell.execute_reply":"2024-06-01T07:51:16.509715Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(new_data.dtypes)\nprint(test.dtypes)\nnew_data.iloc[:, :-1] = new_data.iloc[:, :-1].astype('category')\ntest.iloc[:, :-1] = test.iloc[:, :-1].astype('category')\nprint ()\n\nfrom sklearn.preprocessing import LabelEncoder\n\n# Create a LabelEncoder object\nle = LabelEncoder()\n\n# Iterate over each column in the DataFrame, except the last one\nfor column in new_data.columns[:-1]:\n    # Check if the column is of object type\n    if new_data[column].dtype == 'object':\n        # If yes, convert it to category\n        new_data[column] = le.fit_transform(new_data[column])\n        test[column] = le.fit_transform(test[column])\n\nprint(new_data.dtypes)\nprint(test.dtypes)","metadata":{"execution":{"iopub.status.busy":"2024-06-01T07:51:16.511960Z","iopub.execute_input":"2024-06-01T07:51:16.512273Z","iopub.status.idle":"2024-06-01T07:51:18.796647Z","shell.execute_reply.started":"2024-06-01T07:51:16.512247Z","shell.execute_reply":"2024-06-01T07:51:18.795400Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X = new_data.drop('is_fraud', axis = 1)\ny=new_data['is_fraud']","metadata":{"execution":{"iopub.status.busy":"2024-06-01T07:51:18.797962Z","iopub.execute_input":"2024-06-01T07:51:18.798383Z","iopub.status.idle":"2024-06-01T07:51:18.815627Z","shell.execute_reply.started":"2024-06-01T07:51:18.798346Z","shell.execute_reply":"2024-06-01T07:51:18.814306Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_test = test.drop('is_fraud', axis = 1)\ny_test=test['is_fraud']","metadata":{"execution":{"iopub.status.busy":"2024-06-01T07:51:18.817086Z","iopub.execute_input":"2024-06-01T07:51:18.817490Z","iopub.status.idle":"2024-06-01T07:51:18.836899Z","shell.execute_reply.started":"2024-06-01T07:51:18.817454Z","shell.execute_reply":"2024-06-01T07:51:18.835620Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split","metadata":{"execution":{"iopub.status.busy":"2024-06-01T07:51:18.838306Z","iopub.execute_input":"2024-06-01T07:51:18.838630Z","iopub.status.idle":"2024-06-01T07:51:18.953813Z","shell.execute_reply.started":"2024-06-01T07:51:18.838603Z","shell.execute_reply":"2024-06-01T07:51:18.952655Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_train, X_test, y_train, y_test = X, X_test, y, y_test","metadata":{"execution":{"iopub.status.busy":"2024-06-01T07:51:18.955216Z","iopub.execute_input":"2024-06-01T07:51:18.955509Z","iopub.status.idle":"2024-06-01T07:51:18.960457Z","shell.execute_reply.started":"2024-06-01T07:51:18.955484Z","shell.execute_reply":"2024-06-01T07:51:18.959341Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import numpy as np","metadata":{"execution":{"iopub.status.busy":"2024-06-01T07:51:18.961863Z","iopub.execute_input":"2024-06-01T07:51:18.962262Z","iopub.status.idle":"2024-06-01T07:51:18.977162Z","shell.execute_reply.started":"2024-06-01T07:51:18.962226Z","shell.execute_reply":"2024-06-01T07:51:18.975979Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix, classification_report\nfrom sklearn.linear_model import LogisticRegression, SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier, BaggingClassifier, ExtraTreesClassifier, VotingClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB","metadata":{"execution":{"iopub.status.busy":"2024-06-01T07:51:18.981954Z","iopub.execute_input":"2024-06-01T07:51:18.982427Z","iopub.status.idle":"2024-06-01T07:51:19.259502Z","shell.execute_reply.started":"2024-06-01T07:51:18.982396Z","shell.execute_reply":"2024-06-01T07:51:19.258425Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"new_data.info()\nprint('*******')\nnew_data.head()\n# print(new_data.nunique())","metadata":{"execution":{"iopub.status.busy":"2024-06-01T07:51:19.260773Z","iopub.execute_input":"2024-06-01T07:51:19.261113Z","iopub.status.idle":"2024-06-01T07:51:19.288755Z","shell.execute_reply.started":"2024-06-01T07:51:19.261085Z","shell.execute_reply":"2024-06-01T07:51:19.287688Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix, classification_report\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.ensemble import VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\n\nclassifier = {\n    \"Logistic Regression\": LogisticRegression(),\n    \"Decision Tree Classifier\": DecisionTreeClassifier(),\n    \"Random Forest Classifier\": RandomForestClassifier(),\n    \"Support Vector Classifier\": SVC(),\n#     \"K-Nearest Neighbors Classifier\": KNeighborsClassifier(),\n#     \"Gaussian Naive Bayes\": GaussianNB(),\n#     \"AdaBoost Classifier\": AdaBoostClassifier(),\n#     \"Gradient Boosting Classifier\": GradientBoostingClassifier(),\n#     \"Bagging Classifier\": BaggingClassifier(),\n#     \"Extra Trees Classifier\": ExtraTreesClassifier(),\n#     \"Stochastic Gradient Descent Classifier\": SGDClassifier(),\n#     \"Voting Classifier\": VotingClassifier(estimators=[\n#         ('lr', LogisticRegression()),\n#         ('dt', DecisionTreeClassifier()),\n#         ('rf', RandomForestClassifier()),\n#         ('svc', SVC()),\n#         ('knn', KNeighborsClassifier())\n#     ], voting='hard')\n}\n\nfor name, clf in classifier.items():\n    print(f\"\\n=========={name}===========\")\n    clf.fit(X_train, y_train)\n    y_pred = clf.predict(X_test)\n    \n    # Evaluation Metrics\n    accuracy = accuracy_score(y_test, y_pred)\n    precision = precision_score(y_test, y_pred)\n    recall = recall_score(y_test, y_pred)\n    f1 = f1_score(y_test, y_pred)\n    print(f\"\\n Accuracy: {accuracy}\")\n    print(f\" Precision: {precision}\")\n    print(f\" Recall: {recall}\")\n    print(f\" F1 Score: {f1}\")\n    \n    # Confusion Matrix\n    print(\"\\n Confusion Matrix:\")\n    print(confusion_matrix(y_test, y_pred))\n    \n    # Classification Report\n    print(\"\\n Classification Report:\")\n    print(classification_report(y_test, y_pred))","metadata":{"execution":{"iopub.status.busy":"2024-06-01T07:51:19.290269Z","iopub.execute_input":"2024-06-01T07:51:19.290938Z","iopub.status.idle":"2024-06-01T08:12:37.462403Z","shell.execute_reply.started":"2024-06-01T07:51:19.290908Z","shell.execute_reply":"2024-06-01T08:12:37.460859Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Support Vector Classifier is best performing model","metadata":{}},{"cell_type":"code","source":"import joblib\n\n# Assuming 'clf' is your trained BernoulliNB Naive Bayes classifier\nsupport_vector_classifier = classifier[\"Support Vector Classifier\"]\n\n# Save the model to a file\njoblib.dump(support_vector_classifier, \"support_vector_classifier.pkl\")","metadata":{"execution":{"iopub.status.busy":"2024-06-01T08:12:37.463872Z","iopub.execute_input":"2024-06-01T08:12:37.464316Z","iopub.status.idle":"2024-06-01T08:12:37.479175Z","shell.execute_reply.started":"2024-06-01T08:12:37.464286Z","shell.execute_reply":"2024-06-01T08:12:37.477609Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import os\n\n# List all files in the current directory\nfiles = os.listdir('.')\nprint(\"Files in the current directory:\", files)\n","metadata":{"execution":{"iopub.status.busy":"2024-06-01T08:12:37.480597Z","iopub.execute_input":"2024-06-01T08:12:37.480982Z","iopub.status.idle":"2024-06-01T08:12:37.490238Z","shell.execute_reply.started":"2024-06-01T08:12:37.480937Z","shell.execute_reply":"2024-06-01T08:12:37.488398Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}